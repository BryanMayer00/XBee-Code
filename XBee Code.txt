// SoftwareSerial is used to communicate with the XBee
#include <SoftwareSerial.h>


SoftwareSerial XBee(2, 3); // Arduino RX, TX (XBee Dout, Din)
int E1 = 10; //M1 Speed Control 
int E2 = 11; //M2 Speed Control 
int M1 = 12; //M1 Direction Control 
int M2 = 13; //M2 Direction Control




void setup()
{
  // Initialize XBee Software Serial port. Make sure the baud
  // rate matches your XBee setting (9600 is default).
  //XBee.begin(9600); 
  XBee.begin(9600);
  Serial.begin(9600);
  printMenu(); // Print a helpful menu:


}


void loop()
{
  // In loop() we continously check to see if a command has been
  //  received.
  if (XBee.available())
  {
    char c = XBee.read();
    switch (c)
    {
    case 'w':      // If received 'w'
    case 'W':      // or 'W'
      if(E1 == 100) {
        fastForward();
        break;
      }
      goForward(); // Drive forward
      break;
    case 'q':      // If received 'q'
    case 'Q':      // or 'Q'
      slowLeft(); // Slight Left
      break;
    case 'a':      // If received 'a'
    case 'A':      // or 'A'
      fastLeft();  // Hard Left
      break;
    case 'e':      // If received 'e'
    case 'E':      // or 'E'
      slowRight();  // Slight Right
      break;
    case 'd':      // If recieved 'd'
    case 'D':      // or 'D'
      fastRight();   // Hard Right
      break;
    case 's':      // If recieved 's'
    case 'S':      // or 'S'
      halt();   // Go Backward
      break;   
    case 'x':      // If recieved 'x'
    case 'X':      // or 'X'
      goBackward();   // Stop
      break; 
    }
  }
}


// Write Digital Pin
// Send a 'd' or 'D' to enter.
// Then send a pin #
//   Use numbers for 0-9, and hex (a, b, c, or d) for 10-13
// Then send a value for high or low
//   Use h, H, or 1 for HIGH. Use l, L, or 0 for LOW
void writeDPin()
{
  while (XBee.available() < 2)
    ; // Wait for pin and value to become available
  char pin = XBee.read();
  char hl = ASCIItoHL(XBee.read());


  // Print a message to let the control know of our intentions:
  XBee.print("Setting pin ");
  XBee.print(pin);
  XBee.print(" to ");
  XBee.println(hl ? "HIGH" : "LOW");


  pin = ASCIItoInt(pin); // Convert ASCCI to a 0-13 value
  pinMode(pin, OUTPUT); // Set pin as an OUTPUT
  digitalWrite(pin, hl); // Write pin accordingly
}


// Write Analog Pin
// Send 'w' or 'W' to enter
// Then send a pin #
//   Use numbers for 0-9, and hex (a, b, c, or d) for 10-13
//   (it's not smart enough (but it could be) to error on
//    a non-analog output pin)
// Then send a 3-digit analog value.
//   Must send all 3 digits, so use leading zeros if necessary.
void writeAPin()
{
  while (XBee.available() < 4)
    ; // Wait for pin and three value numbers to be received
  char pin = XBee.read(); // Read in the pin number
  int value = ASCIItoInt(XBee.read()) * 100; // Convert next three
  value += ASCIItoInt(XBee.read()) * 10;     // chars to a 3-digit
  value += ASCIItoInt(XBee.read());          // number.
  value = constrain(value, 0, 255); // Constrain that number.


  // Print a message to let the control know of our intentions:
  XBee.print("Setting pin ");
  XBee.print(pin);
  XBee.print(" to ");
  XBee.println(value);


  pin = ASCIItoInt(pin); // Convert ASCCI to a 0-13 value
  pinMode(pin, OUTPUT); // Set pin as an OUTPUT
  analogWrite(pin, value); // Write pin accordingly
}


// Read Digital Pin
// Send 'r' or 'R' to enter
// Then send a digital pin # to be read
// The Arduino will print the digital reading of the pin to XBee.
void readDPin()
{
  while (XBee.available() < 1)
    ; // Wait for pin # to be available.
  char pin = XBee.read(); // Read in the pin value


  // Print beggining of message
  XBee.print("Pin ");
  XBee.print(pin);


  pin = ASCIItoInt(pin); // Convert pin to 0-13 value
  pinMode(pin, INPUT); // Set as input
  // Print the rest of the message:
  XBee.print(" = "); 
  XBee.println(digitalRead(pin));
}


// Read Analog Pin
// Send 'a' or 'A' to enter
// Then send an analog pin # to be read.
// The Arduino will print the analog reading of the pin to XBee.
void readAPin()
{
  while (XBee.available() < 1)
    ; // Wait for pin # to be available
  char pin = XBee.read(); // read in the pin value


  // Print beginning of message
  XBee.print("Pin A");
  XBee.print(pin);


  pin = ASCIItoInt(pin); // Convert pin to 0-6 value
  // Printthe rest of the message:
  XBee.print(" = ");
  XBee.println(analogRead(pin));
}


// ASCIItoHL
// Helper function to turn an ASCII value into either HIGH or LOW
int ASCIItoHL(char c)
{
  // If received 0, byte value 0, L, or l: return LOW
  // If received 1, byte value 1, H, or h: return HIGH
  if ((c == '0') || (c == 0) || (c == 'L') || (c == 'l'))
    return LOW;
  else if ((c == '1') || (c == 1) || (c == 'H') || (c == 'h'))
    return HIGH;
  else
    return -1;
}


// ASCIItoInt
// Helper function to turn an ASCII hex value into a 0-15 byte val
int ASCIItoInt(char c)
{
  if ((c >= '0') && (c <= '9'))
    return c - 0x30; // Minus 0x30
  else if ((c >= 'A') && (c <= 'F'))
    return c - 0x37; // Minus 0x41 plus 0x0A
  else if ((c >= 'a') && (c <= 'f'))
    return c - 0x57; // Minus 0x61 plus 0x0A
  else
    return -1;
}


void blinkLED() {
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
}


// printMenu
// A big ol' string of Serial prints that print a usage menu over
// to the other XBee.
void printMenu()
{
  // Everything is "F()"'d -- which stores the strings in flash.
  // That'll free up SRAM for more importanat stuff.
  XBee.println();
  XBee.println(F("Arduino XBee Remote Control!"));
  XBee.println(F("============================"));
  XBee.println(F("Usage: "));
  XBee.println(F("W to go forward, again to go fast"));
  XBee.println(F("A for rotate left"));
  XBee.println(F("D for rotate right"));
  XBee.println(F("S for stop"));
  XBee.println(F("X for reverse"));
  XBee.println(F("Q for slight left"));
  XBee.println(F("E for slight right"));
  XBee.println(F("============================"));  
  XBee.println();
}
////////////////////////////////////////////////////
////////////////////////////////////////////////////
///////////// Go Forward/Backward Routine /////////////////// 
void goForward(){ 
analogWrite (E1,100); 
digitalWrite(M1,LOW); 
analogWrite (E2,100); 
digitalWrite(M2,LOW); 
XBee.println("Driving Forward");
Serial.println("Driving Forward");
} 


void fastForward(){ 
analogWrite (E1,200); 
digitalWrite(M1,LOW); 
analogWrite (E2,200); 
digitalWrite(M2,LOW); 
XBee.println("Full Steam Ahead");
Serial.println("Full Steam Ahead");
} 


void goBackward(){ 
analogWrite (E1,100); 
digitalWrite(M1,HIGH); 
analogWrite (E2,100); 
digitalWrite(M2,HIGH);
XBee.println("Driving Backward"); 
Serial.println("Driving Backward");
} 
//////////////////////////////////////////////////// 


///////////// Turn Right Routine /////////////////// 
void slowRight(){ 
analogWrite (E1,50);
digitalWrite(M1,LOW); 
analogWrite (E2,150); 
digitalWrite(M2,LOW);
XBee.println("Turning Slight Right"); 
Serial.println("Turning Slight Right");
}


void fastRight(){ 
analogWrite (E1,254);
digitalWrite(M1,HIGH); 
analogWrite (E2,254); 
digitalWrite(M2,LOW); 
XBee.println("Turning Hard Right");
Serial.println("Turning Hard Right");
}
//////////////////////////////////////////////////// 


///////////// Turn Left Routine /////////////////// 
void slowLeft(){ 
analogWrite (E1,150); 
digitalWrite(M1,LOW); 
analogWrite (E2,50); 
digitalWrite(M2,LOW); 
XBee.println("Turning Slight Left");
Serial.println("Turning Slight Left");
} 


void fastLeft(){ 
analogWrite (E1,254); 
digitalWrite(M1,LOW); 
analogWrite (E2,254); 
digitalWrite(M2,HIGH);
XBee.println("Turning Hard Left"); 
Serial.println("Turning Hard Left"); 
} 
//////////////////////////////////////////////////// 


///////////// Stop Routine /////////////////// 
void halt(){ 
analogWrite (E1,0); 
digitalWrite(M1,LOW); 
analogWrite (E2,0); 
digitalWrite(M2,LOW); 
XBee.println("Stopping Now");
Serial.println("Stopping Now");
} 
////////////////////////////////////////////////////